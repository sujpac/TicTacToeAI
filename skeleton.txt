# Implement main game loop

board = new board()

while True:

    # TODO: represent player
    current_player = '??'

    render(board)

    # Get the move the current current_player
    # is going to make
    move_coords = get_move()

    make_move(board, move_coords, current_player)

    # Check if there's a winner
    winner = get_winner(board)

    if winner is not None:
        print 'Winner is %s!' % winner
        break

    if is_board_full(board):
        print "It's a draw!"
        break

# Implement minimax algorithm

# board is 2D grid to be scored
# current_player is the player whose turn it is
# ('X' or 'O')
def minimax_score(board, current_player):
    # If board is in terminal state, return the appropriate score
    if x_has_won():
        return 10
    if o_has_won():
        return -10
    elif is_draw():
        return 0

    legal_moves =  get_legal_moves(board)

    # Iterate through the moves and calculate a score for each
    scores = []
    for move in legal_moves:
        new_board = make_move(board, move, current_player)

        # Recursively visit minimax_score
        opponent = get_opponent(current_player)
        score = minimax_score(new_board, opponent)
        scores.append(score)

    # If current player is 'X' (our AI), find maximum score
    # If current player is 'O' (our AI's opponent), find minimum score
    if current_player == 'X':
        return max(scores)
    else:
        return min(scores)
